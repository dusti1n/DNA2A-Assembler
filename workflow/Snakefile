import os # System recognition
num_cores = os.cpu_count() # Recognize CPU cores and save the number

# Load the configuration file
configfile: "config/config.yaml" 



# Check and remove file extension (.fastq.gz)
def remove_file_extension(filename):
    if not filename.endswith('.fastq.gz'):
        raise ValueError("Dateiendung ist nicht '.fastq.gz'")
    return filename[:-9]

# Get the complete path to your sample
def get_full_sample_path(sample):
    return os.path.join(config["sample_path"], sample)

# Read the samples from the text file; Example: Sample.fastq.gz;
samples_txt = os.path.join("results", config["project_name"], config["project_name"] + ".txt")
with open(samples_txt, 'r') as f:
    samples = [remove_file_extension(line.strip()) for line in f] # The function (remove_file_extension()) checks and removes the file extension



# rule all; create output files
rule all:
    input:
        # output; rule rlplot; {sample}.pdf;
        expand("results/{project_name}/rlplot/{sample}.pdf", project_name=config['project_name'], sample=samples),
        
        # output; rule unzip; {sample}.fastq;
        expand("results/{project_name}/temp/{sample}.fastq", project_name=config['project_name'], sample=samples),
        
        # output; rule n50pre; {sample}.txt;
        expand("results/{project_name}/n50pre/{sample}.txt", project_name=config['project_name'], sample=samples),
        
        # output; rule fastqc; {sample}_fastqc.html; {sample}_fastqc.zip;
        expand("results/{project_name}/fastqc/{sample}/{sample}_fastqc.html", project_name=config['project_name'], sample=samples),
        expand("results/{project_name}/fastqc/{sample}/{sample}_fastqc.zip", project_name=config['project_name'], sample=samples),
        
        # output; rule multiqc; multiqc_report.html;
        expand("results/{project_name}/multiqc/multiqc_report.html", project_name=config['project_name']),
        
        # output; rule porechop; {sample}.trimmed.fastq;
        expand("results/{project_name}/porechop/{sample}.trimmed.fastq", project_name=config['project_name'], sample=samples),
        
        # output; rule canu; {sample}.contigs.fasta;
        expand("results/{project_name}/assemblies/{sample}/{sample}.contigs.fasta", project_name=config['project_name'], sample=samples),
        
        # output; rule n50post; {sample}.txt;
        expand("results/{project_name}/n50post/{sample}.txt", project_name=config['project_name'], sample=samples),

        # output; rule cvplotcsv; {sample}.csv;
        expand("results/{project_name}/cvplot/{sample}.csv", project_name=config['project_name'], sample=samples),

        # output; rule cvplot; {sample}.pdf;
        expand("results/{project_name}/cvplot/{sample}.pdf", project_name=config['project_name'], sample=samples),

        # output; rule busco; {short_summary.txt};
        expand("results/{project_name}/busco/{sample}_short_summary.txt", project_name=config['project_name'], sample=samples),

        # output; rule bcplotcsv; {{sample}_busco.csv};
        expand("results/{project_name}/csvbusco/{sample}_busco.csv", project_name=config['project_name'], sample=samples),

        # output; rule buscoplot; {sample}.pdf;
        expand("results/{project_name}/bcplot/{sample}.pdf", project_name=config['project_name'], sample=samples),

        # output; rule racon; {sample}.fasta;
        expand("results/{project_name}/racon/{sample}.fasta", project_name=config['project_name'], sample=samples)



# all rules are stored in the rules folder!
# workflow/rules
# rule bioawk; create a read-length table
include: "rules/bioawk.smk"
# rule rlplot; create a read-length plot
include: "rules/rlplot.smk"
# rule fastqc; analyze the raw data
include: "rules/fastqc.smk"
# rule multiqc; compilation of the samples
include: "rules/multiqc.smk"
# rule porechop; remove the adapter sequences
include: "rules/porechop.smk"
# rule unzip; unzip the fastq.gz files
include: "rules/unzip.smk"
# rule n50pre; create n50 statistics from the raw data
include: "rules/n50pre.smk"
# rule canu; genome assembling
include: "rules/canu.smk"
# rule n50post; create an n50 statistic with the assembled genome
include: "rules/n50post.smk"
# rule cvplot_csv; create a csv file for coverage plot
include: "rules/cvplotcsv.smk"
# rule cvplot; create a coverage plot
include: "rules/cvplot.smk"
# rule busco; analysis
include: "rules/busco.smk"
# rule bcplotcsv; create a csv file for BUSCO plot
include: "rules/bcplotcsv.smk"
# rule buscoplot; create a BUSCO plot
include: "rules/buscoplot.smk"
# rule racon; Racon polish a genome assembly using sequencing reads, improving its accuracy.
include: "rules/racon.smk"