import os
import json
num_cores = os.cpu_count() # Recognize CPU cores

# Load the configuration file
configfile: "config/config.yaml" 

# Variable saves a boolean value
include_illumina = config["illumina_data"]

# The read_samples_from_txt function reads sample information from a text file, categorizes it by technology and saves it in a Python dictionary.
def read_samples_from_txt(samples_txt, include_illumina):
    samples = {}
    with open(samples_txt, 'r') as f:
        for line in f:
            # Remove leading/trailing spaces and a trailing semicolon
            line_cleaned = line.strip().rstrip(';').strip()
            parts = line_cleaned.split("; ")
            sample_name = parts[0]  # sample_name should now be free of unwanted characters

            samples[sample_name] = {}
            for part in parts[1:]:
                if part.startswith("ONT:"):
                    samples[sample_name]['ONT'] = part.replace("ONT: ", "").split(", ")
                elif part.startswith("Illumina:") and include_illumina:
                    samples[sample_name]['Illumina'] = part.replace("Illumina: ", "").split(", ")

    # Check whether the dictionary should be saved
    if config.get('save_dict', False):
        save_path = os.path.join("results", config["project_name"], "samples.json")
        with open(save_path, 'w') as f:
            json.dump(samples, f, indent=4)
    return samples


samples_txt = os.path.join("results", config["project_name"], config["project_name"] + "_db.txt")
samples = read_samples_from_txt(samples_txt, include_illumina)


# rule all; create output files
rule all:
    input:
        # output; rule rlplot; {sample}.pdf;
        expand("results/{project_name}/rlplot/{sample}.pdf", project_name=config['project_name'], sample=samples),
        
        # output; rule unzip; {sample}.fastq;
        expand("results/{project_name}/temp/{sample}.fastq", project_name=config['project_name'], sample=samples),
        
        # output; rule n50pre; {sample}.txt;
        expand("results/{project_name}/n50pre/{sample}.txt", project_name=config['project_name'], sample=samples),
        
        # output; rule fastqc; {sample}_fastqc.html; {sample}_fastqc.zip;
        expand("results/{project_name}/fastqc/{sample}/{sample}_fastqc.html", project_name=config['project_name'], sample=samples),
        expand("results/{project_name}/fastqc/{sample}/{sample}_fastqc.zip", project_name=config['project_name'], sample=samples),
        
        # output; rule multiqc; multiqc_report.html;
        expand("results/{project_name}/multiqc/multiqc_report.html", project_name=config['project_name']),
        
        # output; rule porechop; {sample}.trimmed.fastq;
        expand("results/{project_name}/porechop/{sample}.trimmed.fastq", project_name=config['project_name'], sample=samples),
        
        # output; rule canu; {sample}.contigs.fasta;
        expand("results/{project_name}/assemblies/{sample}/{sample}.contigs.fasta", project_name=config['project_name'], sample=samples),
        
        # output; rule n50post; {sample}.txt;
        expand("results/{project_name}/n50post/{sample}.txt", project_name=config['project_name'], sample=samples),

        # output; rule cvplotcsv; {sample}.csv;
        expand("results/{project_name}/cvplot/{sample}.csv", project_name=config['project_name'], sample=samples),

        # output; rule cvplot; {sample}.pdf;
        expand("results/{project_name}/cvplot/{sample}.pdf", project_name=config['project_name'], sample=samples),

        # output; rule busco; {short_summary.txt};
        expand("results/{project_name}/busco/{sample}_short_summary.txt", project_name=config['project_name'], sample=samples),

        # output; rule bcplotcsv; {{sample}_busco.csv};
        expand("results/{project_name}/csvbusco/{sample}_busco.csv", project_name=config['project_name'], sample=samples),

        # output; rule buscoplot; {sample}.pdf;
        expand("results/{project_name}/bcplot/{sample}.pdf", project_name=config['project_name'], sample=samples),

        # output; rule racon; {sample}.fasta;
        expand("results/{project_name}/racon/{sample}.fasta", project_name=config['project_name'], sample=samples),


        # THIS PART IS IMPORTANT IF YOU ALSO WANT TO USE ILLUMINA DATA!
        # output; rule bwa_align; {sample}_bwa_aligned_reads.bam;
        expand("results/{project_name}/bwa_align/{sample}_bwa_aligned_reads.bam", project_name=config['project_name'], sample=samples) if config['illumina_data'] else [],

        # output; rule pilon; {sample}_pilon.fasta;
        expand("results/{project_name}/pilon/{sample}_pilon.fasta", project_name=config['project_name'], sample=samples) if config['illumina_data'] else []


# rule bioawk; create a read-length table;
include: "rules/bioawk.smk"
# rule rlplot; create a read-length plot;
include: "rules/rlplot.smk"
# rule fastqc; analyze the raw data;
include: "rules/fastqc.smk"
# rule multiqc; compilation of the samples;
include: "rules/multiqc.smk"
# rule porechop; remove the adapter sequences;
include: "rules/porechop.smk"
# rule unzip; unzip the fastq.gz files;
include: "rules/unzip.smk"
# rule n50pre; create n50 statistics from the raw data;
include: "rules/n50pre.smk"
# rule canu; genome assembling;
include: "rules/canu.smk"
# rule n50post; create an n50 statistic with the assembled genome;
include: "rules/n50post.smk"
# rule cvplot_csv; create a csv file for coverage plot;
include: "rules/cvplotcsv.smk"
# rule cvplot; create a coverage plot;
include: "rules/cvplot.smk"
# rule busco; analysis;
include: "rules/busco.smk"
# rule bcplotcsv; create a csv file for BUSCO plot;
include: "rules/bcplotcsv.smk"
# rule buscoplot; create a BUSCO plot;
include: "rules/buscoplot.smk"
# rule racon; Racon polish a genome assembly using sequencing reads, improving its accuracy.;
include: "rules/racon.smk"


# THIS PART IS IMPORTANT IF YOU ALSO WANT TO USE ILLUMINA DATA!
if config["illumina_data"]:
    # rule bwa_align; create a bam file;
    include: "rules/bwa_align.smk"
    # rule pilon; cleaning fasta file;
    include: "rules/pilon.smk"